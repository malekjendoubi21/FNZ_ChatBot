@model List<FNZ_ChatBot.Models.ConversationHistory>
@{
    ViewData["Title"] = "Chat FNZ";
    var conversationId = ViewBag.ConversationId as int?;
    var userId = ViewBag.UserId as string;
    var questionSuggestions = ViewBag.QuestionSuggestions as List<FNZ_ChatBot.Controllers.QuestionSuggestion> ?? new List<FNZ_ChatBot.Controllers.QuestionSuggestion>();
}

<div class="chat-container">
    <!-- Header du chat -->
    <div class="chat-header">
        <div class="chat-header-content">
            <div class="chat-title">
                <div class="chat-avatar">
                    <i class="fas fa-robot"></i>
                </div>
                <div class="chat-info">
                    <h4 class="chat-name">Assistant FNZ</h4>
                    <span class="chat-status online">En ligne</span>
                </div>
            </div>
            <div class="chat-actions">
                <button class="chat-action-btn" id="suggestionsBtn" title="Suggestions de questions">
                    <i class="fas fa-lightbulb"></i>
                </button>
                <button class="chat-action-btn" id="settingsBtn" title="Paramètres">
                    <i class="fas fa-cog"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Zone des messages -->
    <div class="chat-messages" id="chatMessages">
        @if (ViewBag.ConversationHistory != null && ((List<FNZ_ChatBot.Models.ConversationHistory>)ViewBag.ConversationHistory).Any())
        {
            @foreach (var message in (List<FNZ_ChatBot.Models.ConversationHistory>)ViewBag.ConversationHistory)
            {
                <!-- Message utilisateur -->
                <div class="message-wrapper user">
                    <div class="message-content">
                        <div class="message-bubble user">
                            @message.Question
                        </div>
                        <div class="message-time">@message.CreatedDate.ToString("HH:mm")</div>
                        <div class="message-status">
                            <i class="fas fa-check-double status-icon status-read"></i>
                        </div>
                    </div>
                </div>
                
                <!-- Réponse assistant -->
                <div class="message-wrapper bot">
                    <div class="message-avatar bot">
                        <i class="fas fa-robot"></i>
                    </div>
                    <div class="message-content">
                        <div class="message-bubble bot">
                            @Html.Raw(message.Response.Replace("\n", "<br />"))
                        </div>
                        <div class="message-time">@message.CreatedDate.ToString("HH:mm")</div>
                    </div>
                </div>
            }
        }
        else
        {
            <!-- État vide avec suggestions dynamiques -->
            <div class="chat-empty">
                <div class="empty-icon">
                    <i class="fas fa-robot"></i>
                </div>
                <h3 class="empty-title">Bonjour ! 👋</h3>
                <p class="empty-description">
                    Je suis votre assistant virtuel FNZ. Comment puis-je vous aider aujourd'hui ?
                </p>
                
                <!-- Suggestions dynamiques -->
                @if (questionSuggestions.Any())
                {
                    <div class="question-suggestions" id="questionSuggestions">
                        <h6 class="suggestions-title">Quelques idées pour commencer :</h6>
                        <div class="suggestions-grid">
                            @foreach (var suggestion in questionSuggestions)
                            {
                                <button type="button" class="suggestion-card" data-question="@suggestion.OriginalQuestion">
                                    <div class="suggestion-icon">@suggestion.Icon</div>
                                    <div class="suggestion-text">
                                        <span class="suggestion-category">@suggestion.Category</span>
                                        <span class="suggestion-question">@suggestion.DisplayQuestion</span>
                                    </div>
                                </button>
                            }
                        </div>
                        
                        <div class="suggestions-footer">
                            <button type="button" class="btn-refresh-suggestions" id="refreshSuggestions">
                                <i class="fas fa-sync-alt me-1"></i>
                                Autres suggestions
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Suggestions par défaut si aucune donnée -->
                    <div class="empty-suggestions">
                        <div class="suggestion-chip">Comment créer une connexion SQL ?</div>
                        <div class="suggestion-chip">Comment cloner un repository Git ?</div>
                        <div class="suggestion-chip">Comment créer une API REST ?</div>
                        <div class="suggestion-chip">Comment faire une migration EF ?</div>
                    </div>
                }
            </div>
        }
    </div>

    <!-- Zone de saisie -->
    <div class="chat-input-area">
        <div class="chat-input-container">
            <div class="chat-input-wrapper">
                <textarea 
                    id="chatInput" 
                    class="chat-input" 
                    placeholder="Tapez votre message ici..." 
                    rows="1"></textarea>
                <div class="input-actions">
                    <button class="input-action" id="attachBtn" title="Joindre un fichier">
                        <i class="fas fa-paperclip"></i>
                    </button>
                    <button class="input-action" id="emojiBtn" title="Emoji">
                        <i class="fas fa-smile"></i>
                    </button>
                </div>
            </div>
            <button id="sendButton" class="send-button" disabled>
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
        
        <!-- Indicateur de frappe -->
        <div class="typing-indicator" id="typingIndicator" style="display: none;">
            <div class="typing-dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
            <span class="typing-text">Assistant FNZ est en train d'écrire...</span>
        </div>
    </div>

    <!-- Panel des suggestions (masqué par défaut) -->
    <div class="suggestions-panel" id="suggestionsPanel" style="display: none;">
        <div class="suggestions-panel-header">
            <h6><i class="fas fa-lightbulb me-2"></i>Suggestions de questions</h6>
            <button class="close-suggestions" id="closeSuggestions">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="suggestions-panel-content" id="suggestionsPanelContent">
            <!-- Sera rempli dynamiquement -->
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/chat-modern.js" asp-append-version="true"></script>
    <script>
        // Configuration spécifique pour cette instance
        document.addEventListener('DOMContentLoaded', function() {
            // Définir l'ID de conversation actuel
            if (window.modernChat) {
                window.modernChat.currentConversationId = @(conversationId?.ToString() ?? "null");
                window.modernChat.initializeSuggestions();
            }

            // Gestion des suggestions de questions
            document.querySelectorAll('.suggestion-card, .suggestion-chip').forEach(button => {
                button.addEventListener('click', function() {
                    const question = this.getAttribute('data-question') || this.textContent.trim();
                    const chatInput = document.getElementById('chatInput');
                    if (chatInput) {
                        chatInput.value = question;
                        chatInput.focus();
                        // Auto-resize si nécessaire
                        if (typeof autoResize === 'function') {
                            autoResize.call(chatInput);
                        }
                    }
                });
            });

            // Actualiser les suggestions
            document.getElementById('refreshSuggestions')?.addEventListener('click', function() {
                const button = this;
                const originalContent = button.innerHTML;
                button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Chargement...';
                button.disabled = true;

                fetch('@Url.Action("GetQuestionSuggestions", "Chat")')
                    .then(response => response.json())
                    .then(data => {
                        updateSuggestions(data.suggestions);
                    })
                    .catch(error => {
                        console.error('Erreur:', error);
                    })
                    .finally(() => {
                        button.innerHTML = originalContent;
                        button.disabled = false;
                    });
            });

            // Panel des suggestions
            document.getElementById('suggestionsBtn')?.addEventListener('click', function() {
                const panel = document.getElementById('suggestionsPanel');
                if (panel.style.display === 'none') {
                    loadSuggestionsPanel();
                    panel.style.display = 'block';
                } else {
                    panel.style.display = 'none';
                }
            });

            document.getElementById('closeSuggestions')?.addEventListener('click', function() {
                document.getElementById('suggestionsPanel').style.display = 'none';
            });
        });

        function updateSuggestions(suggestions) {
            const container = document.querySelector('.suggestions-grid');
            if (!container) return;

            container.innerHTML = '';
            suggestions.forEach(suggestion => {
                const button = document.createElement('button');
                button.type = 'button';
                button.className = 'suggestion-card';
                button.setAttribute('data-question', suggestion.originalQuestion);
                button.innerHTML = `
                    <div class="suggestion-icon">${suggestion.icon}</div>
                    <div class="suggestion-text">
                        <span class="suggestion-category">${suggestion.category}</span>
                        <span class="suggestion-question">${suggestion.displayQuestion}</span>
                    </div>
                `;
                
                button.addEventListener('click', function() {
                    const question = this.getAttribute('data-question');
                    const chatInput = document.getElementById('chatInput');
                    if (chatInput) {
                        chatInput.value = question;
                        chatInput.focus();
                    }
                });
                
                container.appendChild(button);
            });
        }

        function loadSuggestionsPanel() {
            const content = document.getElementById('suggestionsPanelContent');
            content.innerHTML = '<div class="loading">Chargement des suggestions...</div>';

            fetch('@Url.Action("GetQuestionSuggestions", "Chat")')
                .then(response => response.json())
                .then(data => {
                    content.innerHTML = '';
                    data.suggestions.forEach(suggestion => {
                        const item = document.createElement('div');
                        item.className = 'suggestion-item';
                        item.innerHTML = `
                            <span class="suggestion-icon">${suggestion.icon}</span>
                            <div class="suggestion-content">
                                <span class="suggestion-category">${suggestion.category}</span>
                                <span class="suggestion-text">${suggestion.displayQuestion}</span>
                            </div>
                        `;
                        item.addEventListener('click', function() {
                            const chatInput = document.getElementById('chatInput');
                            if (chatInput) {
                                chatInput.value = suggestion.originalQuestion;
                                chatInput.focus();
                                document.getElementById('suggestionsPanel').style.display = 'none';
                            }
                        });
                        content.appendChild(item);
                    });
                })
                .catch(error => {
                    content.innerHTML = '<div class="error">Erreur lors du chargement des suggestions</div>';
                    console.error('Erreur:', error);
                });
        }
    </script>

    <style>
        /* Styles pour les suggestions de questions */
        .question-suggestions {
            margin-top: 2rem;
            max-width: 600px;
        }

        .suggestions-title {
            color: #6c757d;
            font-size: 0.9rem;
            margin-bottom: 1rem;
            text-align: center;
        }

        .suggestions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .suggestion-card {
            display: flex;
            align-items: center;
            padding: 1rem;
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 12px;
            transition: all 0.2s ease;
            cursor: pointer;
            text-align: left;
        }

        .suggestion-card:hover {
            background: #e3f2fd;
            border-color: #2196f3;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(33, 150, 243, 0.2);
        }

        .suggestion-icon {
            font-size: 1.5rem;
            margin-right: 1rem;
            min-width: 40px;
        }

        .suggestion-text {
            display: flex;
            flex-direction: column;
        }

        .suggestion-category {
            font-size: 0.75rem;
            color: #6c757d;
            text-transform: uppercase;
            font-weight: 600;
            letter-spacing: 0.5px;
        }

        .suggestion-question {
            font-size: 0.9rem;
            color: #343a40;
            font-weight: 500;
            margin-top: 0.25rem;
        }

        .suggestions-footer {
            text-align: center;
        }

        .btn-refresh-suggestions {
            background: #6c757d;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.85rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .btn-refresh-suggestions:hover {
            background: #5a6268;
            transform: translateY(-1px);
        }

        /* Panel des suggestions */
        .suggestions-panel {
            position: fixed;
            top: 0;
            right: 0;
            width: 350px;
            height: 100vh;
            background: white;
            border-left: 1px solid #dee2e6;
            box-shadow: -4px 0 12px rgba(0,0,0,0.1);
            z-index: 1000;
            overflow-y: auto;
        }

        .suggestions-panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            border-bottom: 1px solid #dee2e6;
            background: #f8f9fa;
        }

        .close-suggestions {
            background: none;
            border: none;
            font-size: 1.2rem;
            cursor: pointer;
            color: #6c757d;
        }

        .suggestions-panel-content {
            padding: 1rem;
        }

        .suggestion-item {
            display: flex;
            align-items: center;
            padding: 0.75rem;
            margin-bottom: 0.5rem;
            background: #f8f9fa;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .suggestion-item:hover {
            background: #e3f2fd;
        }

        .suggestion-content {
            margin-left: 0.75rem;
            display: flex;
            flex-direction: column;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .suggestions-grid {
                grid-template-columns: 1fr;
            }
            
            .suggestions-panel {
                width: 100%;
            }
        }
    </style>
}
