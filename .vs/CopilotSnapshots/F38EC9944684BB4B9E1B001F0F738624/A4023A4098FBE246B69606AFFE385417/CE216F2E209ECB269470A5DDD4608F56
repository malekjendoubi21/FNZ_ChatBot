using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using FNZ_ChatBot.Services;
using FNZ_ChatBot.Data;
using FNZ_ChatBot.Models;
using Microsoft.EntityFrameworkCore;

namespace FNZ_ChatBot.Controllers
{
    [Authorize(Roles = "Admin")]
    public class SemanticAdminController : Controller
    {
        private readonly ApplicationDbContext _context;
        private readonly IChatService _chatService;
        private readonly KnowledgeEnhancementService _enhancementService;

        public SemanticAdminController(ApplicationDbContext context, IChatService chatService)
        {
            _context = context;
            _chatService = chatService;
            _enhancementService = new KnowledgeEnhancementService(context);
        }

        public async Task<IActionResult> Index()
        {
            ViewBag.KnowledgeCount = await _context.KnowledgeBase.CountAsync(k => k.IsActive);
            ViewBag.TotalQuestions = await _context.ConversationHistory.CountAsync();
            
            var suggestions = await _enhancementService.AnalyzeSearchPerformanceAsync();
            ViewBag.Suggestions = suggestions;

            return View();
        }

        [HttpPost]
        public async Task<IActionResult> TestSemantic(string testQuestion)
        {
            if (string.IsNullOrWhiteSpace(testQuestion))
            {
                TempData["Error"] = "Veuillez entrer une question de test.";
                return RedirectToAction("Index");
            }

            try
            {
                var startTime = DateTime.UtcNow;
                var response = await _chatService.GetResponseAsync(testQuestion);
                var endTime = DateTime.UtcNow;
                var responseTime = (endTime - startTime).TotalMilliseconds;

                ViewBag.TestQuestion = testQuestion;
                ViewBag.TestResponse = response;
                ViewBag.ResponseTime = responseTime;
                ViewBag.TestPerformed = true;

                // Analyser la qualité de la réponse
                var quality = AnalyzeResponseQuality(response);
                ViewBag.ResponseQuality = quality;
            }
            catch (Exception ex)
            {
                TempData["Error"] = $"Erreur lors du test : {ex.Message}";
            }

            return await Index();
        }

        [HttpPost]
        public async Task<IActionResult> EnhanceKnowledge()
        {
            try
            {
                var success = await _enhancementService.EnrichKnowledgeBaseAsync();
                if (success)
                {
                    TempData["Success"] = "Base de connaissances enrichie avec succès.";
                }
                else
                {
                    TempData["Error"] = "Erreur lors de l'enrichissement de la base de connaissances.";
                }
            }
            catch (Exception ex)
            {
                TempData["Error"] = $"Erreur : {ex.Message}";
            }

            return RedirectToAction("Index");
        }

        public async Task<IActionResult> Analytics()
        {
            var analytics = new SemanticAnalyticsViewModel();

            try
            {
                // Questions les plus fréquentes
                analytics.MostFrequentQuestions = await _context.ConversationHistory
                    .GroupBy(h => h.Question.ToLower())
                    .Select(g => new QuestionFrequency 
                    { 
                        Question = g.Key, 
                        Count = g.Count() 
                    })
                    .OrderByDescending(q => q.Count)
                    .Take(10)
                    .ToListAsync();

                // Questions sans réponses satisfaisantes
                analytics.UnansweredQuestions = await _context.ConversationHistory
                    .Where(h => h.Response.Contains("n'ai pas trouvé") || 
                               h.Response.Contains("dépasse mes connaissances") ||
                               h.Response.Contains("pas de réponse"))
                    .GroupBy(h => h.Question.ToLower())
                    .Select(g => new QuestionFrequency 
                    { 
                        Question = g.Key, 
                        Count = g.Count() 
                    })
                    .OrderByDescending(q => q.Count)
                    .Take(10)
                    .ToListAsync();

                // Statistiques de performance
                analytics.TotalConversations = await _context.ConversationHistory.CountAsync();
                analytics.ActiveKnowledgeItems = await _context.KnowledgeBase.CountAsync(k => k.IsActive);
                analytics.SuccessRate = analytics.TotalConversations > 0 
                    ? (double)(analytics.TotalConversations - analytics.UnansweredQuestions.Sum(q => q.Count)) / analytics.TotalConversations * 100
                    : 0;
            }
            catch (Exception ex)
            {
                TempData["Error"] = $"Erreur lors de la génération des analytics : {ex.Message}";
            }

            return View(analytics);
        }

        [HttpGet]
        public async Task<IActionResult> GetSuggestions(string question)
        {
            if (string.IsNullOrWhiteSpace(question))
                return Json(new { suggestions = new List<string>() });

            var suggestions = _enhancementService.SuggestImprovements(question);
            return Json(new { suggestions });
        }

        private string AnalyzeResponseQuality(string response)
        {
            if (response.Contains("n'ai pas trouvé") || 
                response.Contains("dépasse mes connaissances") ||
                response.Contains("pas de réponse"))
            {
                return "Faible - Aucune réponse trouvée";
            }

            if (response.Contains("Voici les informations") && response.Contains("**"))
            {
                return "Excellente - Réponses multiples organisées";
            }

            if (response.Length > 50 && !response.Contains("désolé"))
            {
                return "Bonne - Réponse détaillée";
            }

            if (response.Length > 20)
            {
                return "Moyenne - Réponse basique";
            }

            return "Faible - Réponse trop courte";
        }
    }

    public class SemanticAnalyticsViewModel
    {
        public List<QuestionFrequency> MostFrequentQuestions { get; set; } = new();
        public List<QuestionFrequency> UnansweredQuestions { get; set; } = new();
        public int TotalConversations { get; set; }
        public int ActiveKnowledgeItems { get; set; }
        public double SuccessRate { get; set; }
    }

    public class QuestionFrequency
    {
        public string Question { get; set; } = string.Empty;
        public int Count { get; set; }
    }
}