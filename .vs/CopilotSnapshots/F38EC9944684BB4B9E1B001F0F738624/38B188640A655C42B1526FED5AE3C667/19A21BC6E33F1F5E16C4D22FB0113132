@model List<FNZ_ChatBot.Models.ConversationHistory>
@{
    ViewData["Title"] = "Chat FNZ";
    var conversationId = ViewBag.ConversationId as int?;
    var userId = ViewBag.UserId as string;
    var questionSuggestions = ViewBag.QuestionSuggestions as List<FNZ_ChatBot.Controllers.QuestionSuggestion> ?? new List<FNZ_ChatBot.Controllers.QuestionSuggestion>();
}

<div class="chat-container">
    <!-- Header du chat -->
    <div class="chat-header">
        <div class="chat-header-content">
            <div class="chat-title">
                <div class="chat-avatar">
                    <i class="fas fa-robot"></i>
                </div>
                <div class="chat-info">
                    <h4 class="chat-name">Assistant FNZ</h4>
                    <span class="chat-status online">En ligne</span>
                </div>
            </div>
            <div class="chat-actions">
                <button class="chat-action-btn" id="suggestionsBtn" title="Suggestions de questions">
                    <i class="fas fa-lightbulb"></i>
                </button>
                <button class="chat-action-btn" id="settingsBtn" title="Paramètres">
                    <i class="fas fa-cog"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Zone des messages -->
    <div class="chat-messages chat-scrollbar" id="chatMessages">
        @if (ViewBag.ConversationHistory != null && ((List<FNZ_ChatBot.Models.ConversationHistory>)ViewBag.ConversationHistory).Any())
        {
            @foreach (var message in (List<FNZ_ChatBot.Models.ConversationHistory>)ViewBag.ConversationHistory)
            {
                <!-- Message utilisateur -->
                <div class="message-wrapper user chat-slide-up">
                    <div class="message-avatar user">
                        <i class="fas fa-user"></i>
                    </div>
                    <div class="message-content">
                        <div class="message-bubble user">
                            @message.Question
                        </div>
                        <div class="message-time">@message.CreatedDate.ToString("HH:mm")</div>
                        <div class="message-status">
                            <i class="fas fa-check-double status-icon status-read"></i>
                        </div>
                    </div>
                </div>
                
                <!-- Réponse assistant -->
                <div class="message-wrapper bot chat-slide-up">
                    <div class="message-avatar bot">
                        <i class="fas fa-robot"></i>
                    </div>
                    <div class="message-content">
                        <div class="message-bubble bot">
                            @Html.Raw(message.Response.Replace("\n", "<br />"))
                        </div>
                        <div class="message-time">@message.CreatedDate.ToString("HH:mm")</div>
                    </div>
                </div>
            }
        }
        else
        {
            <!-- État vide avec suggestions dynamiques -->
            <div class="chat-empty">
                <div class="empty-icon chat-pulse">
                    <i class="fas fa-robot"></i>
                </div>
                <h3 class="empty-title chat-text-gradient">Bonjour ! 👋</h3>
                <p class="empty-description">
                    Je suis votre assistant virtuel FNZ. Comment puis-je vous aider aujourd'hui ?
                </p>
                
                <!-- Suggestions dynamiques -->
                @if (questionSuggestions.Any())
                {
                    <div class="question-suggestions" id="questionSuggestions">
                        <h6 class="suggestions-title">Quelques idées pour commencer :</h6>
                        <div class="suggestions-grid">
                            @foreach (var suggestion in questionSuggestions)
                            {
                                <button type="button" class="suggestion-card chat-hover-lift" data-question="@suggestion.OriginalQuestion">
                                    <div class="suggestion-icon">@suggestion.Icon</div>
                                    <div class="suggestion-text">
                                        <span class="suggestion-category">@suggestion.Category</span>
                                        <span class="suggestion-question">@suggestion.DisplayQuestion</span>
                                    </div>
                                </button>
                            }
                        </div>
                        
                        <div class="suggestions-footer">
                            <button type="button" class="btn-refresh-suggestions chat-ripple" id="refreshSuggestions">
                                <i class="fas fa-sync-alt me-1"></i>
                                Autres suggestions
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Suggestions par défaut si aucune donnée -->
                    <div class="empty-suggestions">
                        <div class="suggestion-chip chat-hover-lift" data-question="Comment créer une connexion SQL ?">Comment créer une connexion SQL ?</div>
                        <div class="suggestion-chip chat-hover-lift" data-question="Comment cloner un repository Git ?">Comment cloner un repository Git ?</div>
                        <div class="suggestion-chip chat-hover-lift" data-question="Comment créer une API REST ?">Comment créer une API REST ?</div>
                        <div class="suggestion-chip chat-hover-lift" data-question="Comment faire une migration EF ?">Comment faire une migration EF ?</div>
                    </div>
                }
            </div>
        }
    </div>

    <!-- Zone de saisie -->
    <div class="chat-input-area">
        <div class="chat-input-container">
            <div class="chat-input-wrapper">
                <textarea 
                    id="chatInput" 
                    class="chat-input" 
                    placeholder="Tapez votre message ici..." 
                    rows="1"></textarea>
                <div class="input-actions">
                    <button class="input-action chat-hover-lift" id="attachBtn" title="Joindre un fichier">
                        <i class="fas fa-paperclip"></i>
                    </button>
                    <button class="input-action chat-hover-lift" id="emojiBtn" title="Emoji">
                        <i class="fas fa-smile"></i>
                    </button>
                </div>
            </div>
            <button id="sendButton" class="send-button chat-ripple" disabled>
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
        
        <!-- Indicateur de frappe -->
        <div class="typing-indicator chat-slide-in" id="typingIndicator" style="display: none;">
            <div class="typing-dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
            <span class="typing-text">Assistant FNZ est en train d'écrire...</span>
        </div>
    </div>

    <!-- Panel des suggestions (masqué par défaut) -->
    <div class="suggestions-panel chat-glass" id="suggestionsPanel" style="display: none;">
        <div class="suggestions-panel-header">
            <h6><i class="fas fa-lightbulb me-2"></i>Suggestions de questions</h6>
            <button class="close-suggestions chat-hover-lift" id="closeSuggestions">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="suggestions-panel-content chat-scrollbar" id="suggestionsPanelContent">
            <!-- Sera rempli dynamiquement -->
        </div>
    </div>
</div>

<!-- CSS spécifiques pour le chat -->
<link href="~/css/chat-variables.css" rel="stylesheet" />
<link href="~/css/chat-interface.css" rel="stylesheet" />
<link href="~/css/chat-suggestions.css" rel="stylesheet" />

@section Scripts {
    <script>
        // Configuration et initialisation du chat
        document.addEventListener('DOMContentLoaded', function() {
            // Initialiser les variables globales
            window.currentConversationId = @(conversationId?.ToString() ?? "null");
            
            // Éléments du DOM
            const chatInput = document.getElementById('chatInput');
            const sendButton = document.getElementById('sendButton');
            const chatMessages = document.getElementById('chatMessages');
            const typingIndicator = document.getElementById('typingIndicator');

            // Auto-resize du textarea avec transition smooth
            function autoResizeTextarea() {
                if (!chatInput) return;
                
                chatInput.style.height = 'auto';
                const scrollHeight = chatInput.scrollHeight;
                const maxHeight = 120;
                
                if (scrollHeight <= maxHeight) {
                    chatInput.style.height = scrollHeight + 'px';
                } else {
                    chatInput.style.height = maxHeight + 'px';
                }
                
                // Effet visuel pour montrer le redimensionnement
                chatInput.style.transition = 'height 0.2s ease';
            }

            // Mettre à jour l'état du bouton d'envoi avec animation
            function updateSendButtonState() {
                if (!sendButton || !chatInput) return;
                
                const hasText = chatInput.value.trim().length > 0;
                sendButton.disabled = !hasText;
                
                if (hasText) {
                    sendButton.classList.add('active');
                    sendButton.style.transform = 'scale(1.05)';
                } else {
                    sendButton.classList.remove('active');
                    sendButton.style.transform = 'scale(1)';
                }
            }

            // Scroll automatique vers le bas avec animation
            function scrollToBottom(smooth = true) {
                if (chatMessages) {
                    chatMessages.scrollTo({
                        top: chatMessages.scrollHeight,
                        behavior: smooth ? 'smooth' : 'auto'
                    });
                }
            }

            // Ajouter un message à l'interface avec animations
            function addMessage(content, type) {
                if (!chatMessages) return;

                const messageWrapper = document.createElement('div');
                messageWrapper.className = `message-wrapper ${type} chat-slide-up`;
                
                const messageTime = new Date().toLocaleTimeString('fr-FR', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });

                const avatarIcon = type === 'user' ? 'fas fa-user' : 'fas fa-robot';

                messageWrapper.innerHTML = `
                    <div class="message-avatar ${type}">
                        <i class="${avatarIcon}"></i>
                    </div>
                    <div class="message-content">
                        <div class="message-bubble ${type}">
                            ${content.replace(/\n/g, '<br>')}
                        </div>
                        <div class="message-time">${messageTime}</div>
                        ${type === 'user' ? '<div class="message-status"><i class="fas fa-check status-icon status-sent"></i></div>' : ''}
                    </div>
                `;

                // Animation d'entrée
                messageWrapper.style.opacity = '0';
                messageWrapper.style.transform = 'translateY(20px)';
                
                chatMessages.appendChild(messageWrapper);
                
                // Déclencher l'animation
                requestAnimationFrame(() => {
                    messageWrapper.style.transition = 'all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55)';
                    messageWrapper.style.opacity = '1';
                    messageWrapper.style.transform = 'translateY(0)';
                });

                scrollToBottom();

                // Cacher l'état vide avec animation
                const emptyState = document.querySelector('.chat-empty');
                if (emptyState) {
                    emptyState.style.transition = 'all 0.3s ease';
                    emptyState.style.opacity = '0';
                    setTimeout(() => {
                        emptyState.style.display = 'none';
                    }, 300);
                }
            }

            // Afficher l'indicateur de frappe avec animation
            function showTypingIndicator() {
                if (typingIndicator) {
                    typingIndicator.style.display = 'flex';
                    typingIndicator.style.opacity = '0';
                    requestAnimationFrame(() => {
                        typingIndicator.style.transition = 'all 0.3s ease';
                        typingIndicator.style.opacity = '1';
                    });
                    scrollToBottom();
                }
            }

            // Cacher l'indicateur de frappe avec animation
            function hideTypingIndicator() {
                if (typingIndicator) {
                    typingIndicator.style.transition = 'all 0.3s ease';
                    typingIndicator.style.opacity = '0';
                    setTimeout(() => {
                        typingIndicator.style.display = 'none';
                    }, 300);
                }
            }

            // Envoyer un message avec animations et feedback
            async function sendMessage() {
                const message = chatInput.value.trim();
                if (!message) return;

                // Animation du bouton d'envoi
                sendButton.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    sendButton.style.transform = 'scale(1)';
                }, 150);

                // Ajouter le message utilisateur
                addMessage(message, 'user');
                
                // Vider l'input avec animation
                chatInput.style.transition = 'all 0.2s ease';
                chatInput.value = '';
                autoResizeTextarea();
                updateSendButtonState();
                
                // Afficher l'indicateur de frappe
                showTypingIndicator();
                
                try {
                    const response = await fetch('@Url.Action("PostMessage", "Chat")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            Question: message,
                            ConversationId: window.currentConversationId
                        })
                    });

                    const data = await response.json();
                    hideTypingIndicator();
                    
                    if (data.success) {
                        addMessage(data.response, 'bot');
                        
                        // Effet de succès
                        sendButton.style.background = 'linear-gradient(135deg, #22c55e 0%, #16a34a 100%)';
                        setTimeout(() => {
                            sendButton.style.background = '';
                        }, 1000);
                    } else {
                        addMessage(data.message || 'Erreur de communication', 'bot');
                        
                        // Effet d'erreur
                        sendButton.style.background = 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)';
                        setTimeout(() => {
                            sendButton.style.background = '';
                        }, 1000);
                    }
                } catch (error) {
                    hideTypingIndicator();
                    addMessage('Erreur de connexion. Veuillez réessayer.', 'bot');
                    console.error('Erreur chat:', error);
                    
                    // Effet d'erreur de connexion
                    sendButton.style.background = 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)';
                    setTimeout(() => {
                        sendButton.style.background = '';
                    }, 1000);
                }
            }

            // Event listeners avec animations améliorées
            if (chatInput) {
                chatInput.addEventListener('input', function() {
                    autoResizeTextarea();
                    updateSendButtonState();
                });

                chatInput.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        sendMessage();
                    }
                });

                // Effet de focus amélioré
                chatInput.addEventListener('focus', function() {
                    this.parentElement.style.borderColor = 'var(--chat-primary)';
                    this.parentElement.style.boxShadow = '0 0 0 3px var(--chat-focus)';
                });

                chatInput.addEventListener('blur', function() {
                    this.parentElement.style.borderColor = '';
                    this.parentElement.style.boxShadow = '';
                });
            }

            if (sendButton) {
                sendButton.addEventListener('click', sendMessage);
            }

            // Gestion des suggestions avec animations améliorées
            document.querySelectorAll('.suggestion-card, .suggestion-chip').forEach(button => {
                button.addEventListener('click', function() {
                    const question = this.getAttribute('data-question') || this.textContent.trim();
                    
                    // Animation de sélection
                    this.style.transform = 'scale(0.95)';
                    this.style.background = 'var(--chat-primary)';
                    this.style.color = 'white';
                    
                    setTimeout(() => {
                        if (chatInput) {
                            chatInput.value = question;
                            chatInput.focus();
                            autoResizeTextarea();
                            updateSendButtonState();
                        }
                        
                        // Restaurer l'apparence
                        this.style.transform = '';
                        this.style.background = '';
                        this.style.color = '';
                    }, 200);
                });
            });

            // Gestion du panel des suggestions avec animations
            document.getElementById('suggestionsBtn')?.addEventListener('click', function() {
                const panel = document.getElementById('suggestionsPanel');
                if (panel.style.display === 'none') {
                    loadSuggestionsPanel();
                    panel.style.display = 'block';
                    panel.style.transform = 'translateX(100%)';
                    requestAnimationFrame(() => {
                        panel.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
                        panel.style.transform = 'translateX(0)';
                    });
                } else {
                    panel.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
                    panel.style.transform = 'translateX(100%)';
                    setTimeout(() => {
                        panel.style.display = 'none';
                    }, 300);
                }
            });

            document.getElementById('closeSuggestions')?.addEventListener('click', function() {
                const panel = document.getElementById('suggestionsPanel');
                panel.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
                panel.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    panel.style.display = 'none';
                }, 300);
            });

            // Reste des fonctions utilitaires...
            // [Le reste du code JavaScript reste identique]

            // Initialisation
            updateSendButtonState();
            scrollToBottom();
            if (chatInput) {
                chatInput.focus();
            }
            
            // Animation d'entrée pour les messages existants
            document.querySelectorAll('.message-wrapper').forEach((msg, index) => {
                msg.style.animationDelay = `${index * 0.1}s`;
            });
        });
    </script>
}
