using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using FNZ_ChatBot.Data;
using FNZ_ChatBot.Models;

namespace FNZ_ChatBot.Controllers
{
    [Authorize]
    public class UserManagementController : Controller
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly ApplicationDbContext _context;
        private readonly ILogger<UserManagementController> _logger;

        public UserManagementController(
            UserManager<ApplicationUser> userManager,
            ApplicationDbContext context,
            ILogger<UserManagementController> logger)
        {
            _userManager = userManager;
            _context = context;
            _logger = logger;
        }

        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Index()
        {
            var users = await _userManager.Users.ToListAsync();
            var totalUsers = users.Count;
            var adminUsers = 0;
            var regularUsers = 0;

            foreach (var user in users)
            {
                if (await _userManager.IsInRoleAsync(user, "Admin"))
                    adminUsers++;
                else
                    regularUsers++;
            }

            var viewModel = new UserManagementViewModel
            {
                Users = users,
                TotalUsers = totalUsers,
                AdminUsers = adminUsers,
                RegularUsers = regularUsers
            };

            return View(viewModel);
        }

        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Details(string id)
        {
            if (string.IsNullOrEmpty(id))
            {
                return NotFound();
            }

            var user = await _userManager.FindByIdAsync(id);
            if (user == null)
            {
                return NotFound();
            }

            return View(user);
        }

        [Authorize(Roles = "Admin")]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> ToggleAdmin(string id)
        {
            var user = await _userManager.FindByIdAsync(id);
            if (user == null)
            {
                return NotFound();
            }

            var isAdmin = await _userManager.IsInRoleAsync(user, "Admin");
            
            if (isAdmin)
            {
                await _userManager.RemoveFromRoleAsync(user, "Admin");
                await _userManager.AddToRoleAsync(user, "User");
                user.IsAdmin = false;
            }
            else
            {
                await _userManager.RemoveFromRoleAsync(user, "User");
                await _userManager.AddToRoleAsync(user, "Admin");
                user.IsAdmin = true;
            }

            await _userManager.UpdateAsync(user);
            
            return RedirectToAction(nameof(Index));
        }

        [Authorize(Roles = "Admin")]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Delete(string id)
        {
            var user = await _userManager.FindByIdAsync(id);
            if (user == null)
            {
                return NotFound();
            }

            // Ne pas permettre la suppression du dernier administrateur
            var adminUsers = await _userManager.GetUsersInRoleAsync("Admin");
            if (await _userManager.IsInRoleAsync(user, "Admin") && adminUsers.Count <= 1)
            {
                TempData["Error"] = "Impossible de supprimer le dernier administrateur.";
                return RedirectToAction(nameof(Index));
            }

            var result = await _userManager.DeleteAsync(user);
            if (result.Succeeded)
            {
                TempData["Success"] = "Utilisateur supprimé avec succès.";
            }
            else
            {
                TempData["Error"] = "Erreur lors de la suppression de l'utilisateur.";
            }

            return RedirectToAction(nameof(Index));
        }

        // Voir l'historique des conversations d'un utilisateur
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> ConversationHistory(string id)
        {
            if (string.IsNullOrEmpty(id))
            {
                return NotFound();
            }

            var user = await _userManager.FindByIdAsync(id);
            if (user == null)
            {
                return NotFound();
            }

            var conversations = await _context.ConversationHistory
                .Where(c => c.UserId == id)
                .OrderByDescending(c => c.CreatedDate)
                .ToListAsync();

            ViewData["UserName"] = $"{user.FirstName} {user.LastName}";
            return View(conversations);
        }

        // Voir son propre historique
        public async Task<IActionResult> MyHistory()
        {
            var userId = _userManager.GetUserId(User);
            if (string.IsNullOrEmpty(userId))
            {
                return Unauthorized();
            }

            var conversations = await _context.ConversationHistory
                .Where(c => c.UserId == userId)
                .OrderByDescending(c => c.CreatedDate)
                .ToListAsync();

            return View("ConversationHistory", conversations);
        }
    }
}